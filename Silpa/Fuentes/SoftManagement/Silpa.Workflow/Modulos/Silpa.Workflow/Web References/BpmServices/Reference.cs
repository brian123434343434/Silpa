//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.18449
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// Microsoft.VSDesigner generó automáticamente este código fuente, versión=4.0.30319.18449.
// 
#pragma warning disable 1591

namespace Silpa.Workflow.BpmServices {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="GattacaBPMServices9000Soap", Namespace="http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx")]
    public partial class GattacaBPMServices9000 : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback TestTransmissionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPackagesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetProcessesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetProcessByIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetActivityInstanceByUserIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetActivityInstancesByUserIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetProcessInstancesByIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateProcessXMLOperationCompleted;
        
        private System.Threading.SendOrPostCallback WMCreateProcessInstanceOperationCompleted;
        
        private System.Threading.SendOrPostCallback WMStartProcessInstanceOperationCompleted;
        
        private System.Threading.SendOrPostCallback EndActivityInstanceOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetConditionsByActivityInstanceOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetConditionsTypeActivityInstanceOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetConditionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback AttachDataToActivityInstanceOperationCompleted;
        
        private System.Threading.SendOrPostCallback AttachFileToActivityInstanceOperationCompleted;
        
        private System.Threading.SendOrPostCallback AttachCommentToProcessInstanceOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetProcessCasesByProcessOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFormsByProcessCaseOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetProcessAttributeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetProcessAttributeValueOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetProcessAttributeValueByIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateProcessAttributeValueOperationCompleted;
        
        private System.Threading.SendOrPostCallback TestOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public GattacaBPMServices9000() {
            this.Url = global::Silpa.Workflow.Properties.Settings.Default.Silpa_Workflow_BPMServices_GattacaBPMServices9000;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event TestTransmissionCompletedEventHandler TestTransmissionCompleted;
        
        /// <remarks/>
        public event GetPackagesCompletedEventHandler GetPackagesCompleted;
        
        /// <remarks/>
        public event GetProcessesCompletedEventHandler GetProcessesCompleted;
        
        /// <remarks/>
        public event GetProcessByIdCompletedEventHandler GetProcessByIdCompleted;
        
        /// <remarks/>
        public event GetActivityInstanceByUserIdCompletedEventHandler GetActivityInstanceByUserIdCompleted;
        
        /// <remarks/>
        public event GetActivityInstancesByUserIdCompletedEventHandler GetActivityInstancesByUserIdCompleted;
        
        /// <remarks/>
        public event GetProcessInstancesByIdCompletedEventHandler GetProcessInstancesByIdCompleted;
        
        /// <remarks/>
        public event CreateProcessXMLCompletedEventHandler CreateProcessXMLCompleted;
        
        /// <remarks/>
        public event WMCreateProcessInstanceCompletedEventHandler WMCreateProcessInstanceCompleted;
        
        /// <remarks/>
        public event WMStartProcessInstanceCompletedEventHandler WMStartProcessInstanceCompleted;
        
        /// <remarks/>
        public event EndActivityInstanceCompletedEventHandler EndActivityInstanceCompleted;
        
        /// <remarks/>
        public event GetConditionsByActivityInstanceCompletedEventHandler GetConditionsByActivityInstanceCompleted;
        
        /// <remarks/>
        public event GetConditionsTypeActivityInstanceCompletedEventHandler GetConditionsTypeActivityInstanceCompleted;
        
        /// <remarks/>
        public event GetConditionsCompletedEventHandler GetConditionsCompleted;
        
        /// <remarks/>
        public event AttachDataToActivityInstanceCompletedEventHandler AttachDataToActivityInstanceCompleted;
        
        /// <remarks/>
        public event AttachFileToActivityInstanceCompletedEventHandler AttachFileToActivityInstanceCompleted;
        
        /// <remarks/>
        public event AttachCommentToProcessInstanceCompletedEventHandler AttachCommentToProcessInstanceCompleted;
        
        /// <remarks/>
        public event GetProcessCasesByProcessCompletedEventHandler GetProcessCasesByProcessCompleted;
        
        /// <remarks/>
        public event GetFormsByProcessCaseCompletedEventHandler GetFormsByProcessCaseCompleted;
        
        /// <remarks/>
        public event GetProcessAttributeCompletedEventHandler GetProcessAttributeCompleted;
        
        /// <remarks/>
        public event GetProcessAttributeValueCompletedEventHandler GetProcessAttributeValueCompleted;
        
        /// <remarks/>
        public event GetProcessAttributeValueByIdCompletedEventHandler GetProcessAttributeValueByIdCompleted;
        
        /// <remarks/>
        public event UpdateProcessAttributeValueCompletedEventHandler UpdateProcessAttributeValueCompleted;
        
        /// <remarks/>
        public event TestCompletedEventHandler TestCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx/TestTran" +
            "smission", RequestNamespace="http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx", ResponseNamespace="http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool TestTransmission() {
            object[] results = this.Invoke("TestTransmission", new object[0]);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void TestTransmissionAsync() {
            this.TestTransmissionAsync(null);
        }
        
        /// <remarks/>
        public void TestTransmissionAsync(object userState) {
            if ((this.TestTransmissionOperationCompleted == null)) {
                this.TestTransmissionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTestTransmissionOperationCompleted);
            }
            this.InvokeAsync("TestTransmission", new object[0], this.TestTransmissionOperationCompleted, userState);
        }
        
        private void OnTestTransmissionOperationCompleted(object arg) {
            if ((this.TestTransmissionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TestTransmissionCompleted(this, new TestTransmissionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx/GetPacka" +
            "ges", RequestNamespace="http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx", ResponseNamespace="http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetPackages(string Client, long UserId, bool IsOnlyEnabled) {
            object[] results = this.Invoke("GetPackages", new object[] {
                        Client,
                        UserId,
                        IsOnlyEnabled});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetPackagesAsync(string Client, long UserId, bool IsOnlyEnabled) {
            this.GetPackagesAsync(Client, UserId, IsOnlyEnabled, null);
        }
        
        /// <remarks/>
        public void GetPackagesAsync(string Client, long UserId, bool IsOnlyEnabled, object userState) {
            if ((this.GetPackagesOperationCompleted == null)) {
                this.GetPackagesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPackagesOperationCompleted);
            }
            this.InvokeAsync("GetPackages", new object[] {
                        Client,
                        UserId,
                        IsOnlyEnabled}, this.GetPackagesOperationCompleted, userState);
        }
        
        private void OnGetPackagesOperationCompleted(object arg) {
            if ((this.GetPackagesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPackagesCompleted(this, new GetPackagesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx/GetProce" +
            "sses", RequestNamespace="http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx", ResponseNamespace="http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetProcesses(string Client, long UserID, bool IsOnlyEnabled) {
            object[] results = this.Invoke("GetProcesses", new object[] {
                        Client,
                        UserID,
                        IsOnlyEnabled});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetProcessesAsync(string Client, long UserID, bool IsOnlyEnabled) {
            this.GetProcessesAsync(Client, UserID, IsOnlyEnabled, null);
        }
        
        /// <remarks/>
        public void GetProcessesAsync(string Client, long UserID, bool IsOnlyEnabled, object userState) {
            if ((this.GetProcessesOperationCompleted == null)) {
                this.GetProcessesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetProcessesOperationCompleted);
            }
            this.InvokeAsync("GetProcesses", new object[] {
                        Client,
                        UserID,
                        IsOnlyEnabled}, this.GetProcessesOperationCompleted, userState);
        }
        
        private void OnGetProcessesOperationCompleted(object arg) {
            if ((this.GetProcessesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetProcessesCompleted(this, new GetProcessesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx/GetProce" +
            "ssById", RequestNamespace="http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx", ResponseNamespace="http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetProcessById(string Client, long UserID, long IdProcess) {
            object[] results = this.Invoke("GetProcessById", new object[] {
                        Client,
                        UserID,
                        IdProcess});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetProcessByIdAsync(string Client, long UserID, long IdProcess) {
            this.GetProcessByIdAsync(Client, UserID, IdProcess, null);
        }
        
        /// <remarks/>
        public void GetProcessByIdAsync(string Client, long UserID, long IdProcess, object userState) {
            if ((this.GetProcessByIdOperationCompleted == null)) {
                this.GetProcessByIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetProcessByIdOperationCompleted);
            }
            this.InvokeAsync("GetProcessById", new object[] {
                        Client,
                        UserID,
                        IdProcess}, this.GetProcessByIdOperationCompleted, userState);
        }
        
        private void OnGetProcessByIdOperationCompleted(object arg) {
            if ((this.GetProcessByIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetProcessByIdCompleted(this, new GetProcessByIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx/GetActiv" +
            "ityInstanceByUserId", RequestNamespace="http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx", ResponseNamespace="http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetActivityInstanceByUserId(string Client, long UserID, short Status, long Activity, long IdProcessInstance, string OrderBy) {
            object[] results = this.Invoke("GetActivityInstanceByUserId", new object[] {
                        Client,
                        UserID,
                        Status,
                        Activity,
                        IdProcessInstance,
                        OrderBy});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetActivityInstanceByUserIdAsync(string Client, long UserID, short Status, long Activity, long IdProcessInstance, string OrderBy) {
            this.GetActivityInstanceByUserIdAsync(Client, UserID, Status, Activity, IdProcessInstance, OrderBy, null);
        }
        
        /// <remarks/>
        public void GetActivityInstanceByUserIdAsync(string Client, long UserID, short Status, long Activity, long IdProcessInstance, string OrderBy, object userState) {
            if ((this.GetActivityInstanceByUserIdOperationCompleted == null)) {
                this.GetActivityInstanceByUserIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetActivityInstanceByUserIdOperationCompleted);
            }
            this.InvokeAsync("GetActivityInstanceByUserId", new object[] {
                        Client,
                        UserID,
                        Status,
                        Activity,
                        IdProcessInstance,
                        OrderBy}, this.GetActivityInstanceByUserIdOperationCompleted, userState);
        }
        
        private void OnGetActivityInstanceByUserIdOperationCompleted(object arg) {
            if ((this.GetActivityInstanceByUserIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetActivityInstanceByUserIdCompleted(this, new GetActivityInstanceByUserIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx/GetActiv" +
            "ityInstancesByUserId", RequestNamespace="http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx", ResponseNamespace="http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetActivityInstancesByUserId(string Client, long UserID, short Status, long IdProcessInstance, short MaxInstanceActivity, string OrderBy) {
            object[] results = this.Invoke("GetActivityInstancesByUserId", new object[] {
                        Client,
                        UserID,
                        Status,
                        IdProcessInstance,
                        MaxInstanceActivity,
                        OrderBy});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetActivityInstancesByUserIdAsync(string Client, long UserID, short Status, long IdProcessInstance, short MaxInstanceActivity, string OrderBy) {
            this.GetActivityInstancesByUserIdAsync(Client, UserID, Status, IdProcessInstance, MaxInstanceActivity, OrderBy, null);
        }
        
        /// <remarks/>
        public void GetActivityInstancesByUserIdAsync(string Client, long UserID, short Status, long IdProcessInstance, short MaxInstanceActivity, string OrderBy, object userState) {
            if ((this.GetActivityInstancesByUserIdOperationCompleted == null)) {
                this.GetActivityInstancesByUserIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetActivityInstancesByUserIdOperationCompleted);
            }
            this.InvokeAsync("GetActivityInstancesByUserId", new object[] {
                        Client,
                        UserID,
                        Status,
                        IdProcessInstance,
                        MaxInstanceActivity,
                        OrderBy}, this.GetActivityInstancesByUserIdOperationCompleted, userState);
        }
        
        private void OnGetActivityInstancesByUserIdOperationCompleted(object arg) {
            if ((this.GetActivityInstancesByUserIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetActivityInstancesByUserIdCompleted(this, new GetActivityInstancesByUserIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx/GetProce" +
            "ssInstancesById", RequestNamespace="http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx", ResponseNamespace="http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetProcessInstancesById(string Client, long UserID, long ProcessInstancesId) {
            object[] results = this.Invoke("GetProcessInstancesById", new object[] {
                        Client,
                        UserID,
                        ProcessInstancesId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetProcessInstancesByIdAsync(string Client, long UserID, long ProcessInstancesId) {
            this.GetProcessInstancesByIdAsync(Client, UserID, ProcessInstancesId, null);
        }
        
        /// <remarks/>
        public void GetProcessInstancesByIdAsync(string Client, long UserID, long ProcessInstancesId, object userState) {
            if ((this.GetProcessInstancesByIdOperationCompleted == null)) {
                this.GetProcessInstancesByIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetProcessInstancesByIdOperationCompleted);
            }
            this.InvokeAsync("GetProcessInstancesById", new object[] {
                        Client,
                        UserID,
                        ProcessInstancesId}, this.GetProcessInstancesByIdOperationCompleted, userState);
        }
        
        private void OnGetProcessInstancesByIdOperationCompleted(object arg) {
            if ((this.GetProcessInstancesByIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetProcessInstancesByIdCompleted(this, new GetProcessInstancesByIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx/CreatePr" +
            "ocessXML", RequestNamespace="http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx", ResponseNamespace="http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CreateProcessXML(string Client, string sXML) {
            object[] results = this.Invoke("CreateProcessXML", new object[] {
                        Client,
                        sXML});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CreateProcessXMLAsync(string Client, string sXML) {
            this.CreateProcessXMLAsync(Client, sXML, null);
        }
        
        /// <remarks/>
        public void CreateProcessXMLAsync(string Client, string sXML, object userState) {
            if ((this.CreateProcessXMLOperationCompleted == null)) {
                this.CreateProcessXMLOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateProcessXMLOperationCompleted);
            }
            this.InvokeAsync("CreateProcessXML", new object[] {
                        Client,
                        sXML}, this.CreateProcessXMLOperationCompleted, userState);
        }
        
        private void OnCreateProcessXMLOperationCompleted(object arg) {
            if ((this.CreateProcessXMLCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateProcessXMLCompleted(this, new CreateProcessXMLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx/WMCreate" +
            "ProcessInstance", RequestNamespace="http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx", ResponseNamespace="http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long WMCreateProcessInstance(string Client, long UserID, long IDProcessCase, long Sequence, string EntryDataType, string IDEntryData, string EntryData) {
            object[] results = this.Invoke("WMCreateProcessInstance", new object[] {
                        Client,
                        UserID,
                        IDProcessCase,
                        Sequence,
                        EntryDataType,
                        IDEntryData,
                        EntryData});
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public void WMCreateProcessInstanceAsync(string Client, long UserID, long IDProcessCase, long Sequence, string EntryDataType, string IDEntryData, string EntryData) {
            this.WMCreateProcessInstanceAsync(Client, UserID, IDProcessCase, Sequence, EntryDataType, IDEntryData, EntryData, null);
        }
        
        /// <remarks/>
        public void WMCreateProcessInstanceAsync(string Client, long UserID, long IDProcessCase, long Sequence, string EntryDataType, string IDEntryData, string EntryData, object userState) {
            if ((this.WMCreateProcessInstanceOperationCompleted == null)) {
                this.WMCreateProcessInstanceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnWMCreateProcessInstanceOperationCompleted);
            }
            this.InvokeAsync("WMCreateProcessInstance", new object[] {
                        Client,
                        UserID,
                        IDProcessCase,
                        Sequence,
                        EntryDataType,
                        IDEntryData,
                        EntryData}, this.WMCreateProcessInstanceOperationCompleted, userState);
        }
        
        private void OnWMCreateProcessInstanceOperationCompleted(object arg) {
            if ((this.WMCreateProcessInstanceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.WMCreateProcessInstanceCompleted(this, new WMCreateProcessInstanceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx/WMStartP" +
            "rocessInstance", RequestNamespace="http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx", ResponseNamespace="http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long WMStartProcessInstance(string Client, long UserID, long IDProcessInstance) {
            object[] results = this.Invoke("WMStartProcessInstance", new object[] {
                        Client,
                        UserID,
                        IDProcessInstance});
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public void WMStartProcessInstanceAsync(string Client, long UserID, long IDProcessInstance) {
            this.WMStartProcessInstanceAsync(Client, UserID, IDProcessInstance, null);
        }
        
        /// <remarks/>
        public void WMStartProcessInstanceAsync(string Client, long UserID, long IDProcessInstance, object userState) {
            if ((this.WMStartProcessInstanceOperationCompleted == null)) {
                this.WMStartProcessInstanceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnWMStartProcessInstanceOperationCompleted);
            }
            this.InvokeAsync("WMStartProcessInstance", new object[] {
                        Client,
                        UserID,
                        IDProcessInstance}, this.WMStartProcessInstanceOperationCompleted, userState);
        }
        
        private void OnWMStartProcessInstanceOperationCompleted(object arg) {
            if ((this.WMStartProcessInstanceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.WMStartProcessInstanceCompleted(this, new WMStartProcessInstanceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx/EndActiv" +
            "ityInstance", RequestNamespace="http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx", ResponseNamespace="http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string EndActivityInstance(string Client, long UserID, long activityInstanceID, long processInstanceID, string selectedCondition, string comments, string outComments, string entryDataType, string entryData, string idEntryData) {
            object[] results = this.Invoke("EndActivityInstance", new object[] {
                        Client,
                        UserID,
                        activityInstanceID,
                        processInstanceID,
                        selectedCondition,
                        comments,
                        outComments,
                        entryDataType,
                        entryData,
                        idEntryData});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void EndActivityInstanceAsync(string Client, long UserID, long activityInstanceID, long processInstanceID, string selectedCondition, string comments, string outComments, string entryDataType, string entryData, string idEntryData) {
            this.EndActivityInstanceAsync(Client, UserID, activityInstanceID, processInstanceID, selectedCondition, comments, outComments, entryDataType, entryData, idEntryData, null);
        }
        
        /// <remarks/>
        public void EndActivityInstanceAsync(string Client, long UserID, long activityInstanceID, long processInstanceID, string selectedCondition, string comments, string outComments, string entryDataType, string entryData, string idEntryData, object userState) {
            if ((this.EndActivityInstanceOperationCompleted == null)) {
                this.EndActivityInstanceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEndActivityInstanceOperationCompleted);
            }
            this.InvokeAsync("EndActivityInstance", new object[] {
                        Client,
                        UserID,
                        activityInstanceID,
                        processInstanceID,
                        selectedCondition,
                        comments,
                        outComments,
                        entryDataType,
                        entryData,
                        idEntryData}, this.EndActivityInstanceOperationCompleted, userState);
        }
        
        private void OnEndActivityInstanceOperationCompleted(object arg) {
            if ((this.EndActivityInstanceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EndActivityInstanceCompleted(this, new EndActivityInstanceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx/GetCondi" +
            "tionsByActivityInstance", RequestNamespace="http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx", ResponseNamespace="http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ListItem[] GetConditionsByActivityInstance(string Client, long UserID, long ActivityInstanceID) {
            object[] results = this.Invoke("GetConditionsByActivityInstance", new object[] {
                        Client,
                        UserID,
                        ActivityInstanceID});
            return ((ListItem[])(results[0]));
        }
        
        /// <remarks/>
        public void GetConditionsByActivityInstanceAsync(string Client, long UserID, long ActivityInstanceID) {
            this.GetConditionsByActivityInstanceAsync(Client, UserID, ActivityInstanceID, null);
        }
        
        /// <remarks/>
        public void GetConditionsByActivityInstanceAsync(string Client, long UserID, long ActivityInstanceID, object userState) {
            if ((this.GetConditionsByActivityInstanceOperationCompleted == null)) {
                this.GetConditionsByActivityInstanceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetConditionsByActivityInstanceOperationCompleted);
            }
            this.InvokeAsync("GetConditionsByActivityInstance", new object[] {
                        Client,
                        UserID,
                        ActivityInstanceID}, this.GetConditionsByActivityInstanceOperationCompleted, userState);
        }
        
        private void OnGetConditionsByActivityInstanceOperationCompleted(object arg) {
            if ((this.GetConditionsByActivityInstanceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetConditionsByActivityInstanceCompleted(this, new GetConditionsByActivityInstanceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx/GetCondi" +
            "tionsTypeActivityInstance", RequestNamespace="http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx", ResponseNamespace="http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetConditionsTypeActivityInstance(string Client, long UserID, long ActivityInstanceID) {
            object[] results = this.Invoke("GetConditionsTypeActivityInstance", new object[] {
                        Client,
                        UserID,
                        ActivityInstanceID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetConditionsTypeActivityInstanceAsync(string Client, long UserID, long ActivityInstanceID) {
            this.GetConditionsTypeActivityInstanceAsync(Client, UserID, ActivityInstanceID, null);
        }
        
        /// <remarks/>
        public void GetConditionsTypeActivityInstanceAsync(string Client, long UserID, long ActivityInstanceID, object userState) {
            if ((this.GetConditionsTypeActivityInstanceOperationCompleted == null)) {
                this.GetConditionsTypeActivityInstanceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetConditionsTypeActivityInstanceOperationCompleted);
            }
            this.InvokeAsync("GetConditionsTypeActivityInstance", new object[] {
                        Client,
                        UserID,
                        ActivityInstanceID}, this.GetConditionsTypeActivityInstanceOperationCompleted, userState);
        }
        
        private void OnGetConditionsTypeActivityInstanceOperationCompleted(object arg) {
            if ((this.GetConditionsTypeActivityInstanceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetConditionsTypeActivityInstanceCompleted(this, new GetConditionsTypeActivityInstanceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx/GetCondi" +
            "tions", RequestNamespace="http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx", ResponseNamespace="http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetConditions(string Client, long UserID, long ActivityInstanceID) {
            object[] results = this.Invoke("GetConditions", new object[] {
                        Client,
                        UserID,
                        ActivityInstanceID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetConditionsAsync(string Client, long UserID, long ActivityInstanceID) {
            this.GetConditionsAsync(Client, UserID, ActivityInstanceID, null);
        }
        
        /// <remarks/>
        public void GetConditionsAsync(string Client, long UserID, long ActivityInstanceID, object userState) {
            if ((this.GetConditionsOperationCompleted == null)) {
                this.GetConditionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetConditionsOperationCompleted);
            }
            this.InvokeAsync("GetConditions", new object[] {
                        Client,
                        UserID,
                        ActivityInstanceID}, this.GetConditionsOperationCompleted, userState);
        }
        
        private void OnGetConditionsOperationCompleted(object arg) {
            if ((this.GetConditionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetConditionsCompleted(this, new GetConditionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx/AttachDa" +
            "taToActivityInstance", RequestNamespace="http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx", ResponseNamespace="http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool AttachDataToActivityInstance(string Client, long UserID, long activityInstanceID, long processInstanceID, string entryDataType, string entryData, string idEntryData) {
            object[] results = this.Invoke("AttachDataToActivityInstance", new object[] {
                        Client,
                        UserID,
                        activityInstanceID,
                        processInstanceID,
                        entryDataType,
                        entryData,
                        idEntryData});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void AttachDataToActivityInstanceAsync(string Client, long UserID, long activityInstanceID, long processInstanceID, string entryDataType, string entryData, string idEntryData) {
            this.AttachDataToActivityInstanceAsync(Client, UserID, activityInstanceID, processInstanceID, entryDataType, entryData, idEntryData, null);
        }
        
        /// <remarks/>
        public void AttachDataToActivityInstanceAsync(string Client, long UserID, long activityInstanceID, long processInstanceID, string entryDataType, string entryData, string idEntryData, object userState) {
            if ((this.AttachDataToActivityInstanceOperationCompleted == null)) {
                this.AttachDataToActivityInstanceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAttachDataToActivityInstanceOperationCompleted);
            }
            this.InvokeAsync("AttachDataToActivityInstance", new object[] {
                        Client,
                        UserID,
                        activityInstanceID,
                        processInstanceID,
                        entryDataType,
                        entryData,
                        idEntryData}, this.AttachDataToActivityInstanceOperationCompleted, userState);
        }
        
        private void OnAttachDataToActivityInstanceOperationCompleted(object arg) {
            if ((this.AttachDataToActivityInstanceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AttachDataToActivityInstanceCompleted(this, new AttachDataToActivityInstanceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx/AttachFi" +
            "leToActivityInstance", RequestNamespace="http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx", ResponseNamespace="http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool AttachFileToActivityInstance(string Client, long UserID, long activityInstanceID, long processInstanceID, string FullFileName) {
            object[] results = this.Invoke("AttachFileToActivityInstance", new object[] {
                        Client,
                        UserID,
                        activityInstanceID,
                        processInstanceID,
                        FullFileName});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void AttachFileToActivityInstanceAsync(string Client, long UserID, long activityInstanceID, long processInstanceID, string FullFileName) {
            this.AttachFileToActivityInstanceAsync(Client, UserID, activityInstanceID, processInstanceID, FullFileName, null);
        }
        
        /// <remarks/>
        public void AttachFileToActivityInstanceAsync(string Client, long UserID, long activityInstanceID, long processInstanceID, string FullFileName, object userState) {
            if ((this.AttachFileToActivityInstanceOperationCompleted == null)) {
                this.AttachFileToActivityInstanceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAttachFileToActivityInstanceOperationCompleted);
            }
            this.InvokeAsync("AttachFileToActivityInstance", new object[] {
                        Client,
                        UserID,
                        activityInstanceID,
                        processInstanceID,
                        FullFileName}, this.AttachFileToActivityInstanceOperationCompleted, userState);
        }
        
        private void OnAttachFileToActivityInstanceOperationCompleted(object arg) {
            if ((this.AttachFileToActivityInstanceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AttachFileToActivityInstanceCompleted(this, new AttachFileToActivityInstanceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx/AttachCo" +
            "mmentToProcessInstance", RequestNamespace="http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx", ResponseNamespace="http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool AttachCommentToProcessInstance(string Client, long UserID, long processInstanceID, string Comment) {
            object[] results = this.Invoke("AttachCommentToProcessInstance", new object[] {
                        Client,
                        UserID,
                        processInstanceID,
                        Comment});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void AttachCommentToProcessInstanceAsync(string Client, long UserID, long processInstanceID, string Comment) {
            this.AttachCommentToProcessInstanceAsync(Client, UserID, processInstanceID, Comment, null);
        }
        
        /// <remarks/>
        public void AttachCommentToProcessInstanceAsync(string Client, long UserID, long processInstanceID, string Comment, object userState) {
            if ((this.AttachCommentToProcessInstanceOperationCompleted == null)) {
                this.AttachCommentToProcessInstanceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAttachCommentToProcessInstanceOperationCompleted);
            }
            this.InvokeAsync("AttachCommentToProcessInstance", new object[] {
                        Client,
                        UserID,
                        processInstanceID,
                        Comment}, this.AttachCommentToProcessInstanceOperationCompleted, userState);
        }
        
        private void OnAttachCommentToProcessInstanceOperationCompleted(object arg) {
            if ((this.AttachCommentToProcessInstanceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AttachCommentToProcessInstanceCompleted(this, new AttachCommentToProcessInstanceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx/GetProce" +
            "ssCasesByProcess", RequestNamespace="http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx", ResponseNamespace="http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetProcessCasesByProcess(string Client, long UserID, long IdProcess, bool IsOnlyEnabled) {
            object[] results = this.Invoke("GetProcessCasesByProcess", new object[] {
                        Client,
                        UserID,
                        IdProcess,
                        IsOnlyEnabled});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetProcessCasesByProcessAsync(string Client, long UserID, long IdProcess, bool IsOnlyEnabled) {
            this.GetProcessCasesByProcessAsync(Client, UserID, IdProcess, IsOnlyEnabled, null);
        }
        
        /// <remarks/>
        public void GetProcessCasesByProcessAsync(string Client, long UserID, long IdProcess, bool IsOnlyEnabled, object userState) {
            if ((this.GetProcessCasesByProcessOperationCompleted == null)) {
                this.GetProcessCasesByProcessOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetProcessCasesByProcessOperationCompleted);
            }
            this.InvokeAsync("GetProcessCasesByProcess", new object[] {
                        Client,
                        UserID,
                        IdProcess,
                        IsOnlyEnabled}, this.GetProcessCasesByProcessOperationCompleted, userState);
        }
        
        private void OnGetProcessCasesByProcessOperationCompleted(object arg) {
            if ((this.GetProcessCasesByProcessCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetProcessCasesByProcessCompleted(this, new GetProcessCasesByProcessCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx/GetForms" +
            "ByProcessCase", RequestNamespace="http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx", ResponseNamespace="http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetFormsByProcessCase(string Client, long UserID, long IdProcessCase) {
            object[] results = this.Invoke("GetFormsByProcessCase", new object[] {
                        Client,
                        UserID,
                        IdProcessCase});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetFormsByProcessCaseAsync(string Client, long UserID, long IdProcessCase) {
            this.GetFormsByProcessCaseAsync(Client, UserID, IdProcessCase, null);
        }
        
        /// <remarks/>
        public void GetFormsByProcessCaseAsync(string Client, long UserID, long IdProcessCase, object userState) {
            if ((this.GetFormsByProcessCaseOperationCompleted == null)) {
                this.GetFormsByProcessCaseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFormsByProcessCaseOperationCompleted);
            }
            this.InvokeAsync("GetFormsByProcessCase", new object[] {
                        Client,
                        UserID,
                        IdProcessCase}, this.GetFormsByProcessCaseOperationCompleted, userState);
        }
        
        private void OnGetFormsByProcessCaseOperationCompleted(object arg) {
            if ((this.GetFormsByProcessCaseCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFormsByProcessCaseCompleted(this, new GetFormsByProcessCaseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx/GetProce" +
            "ssAttribute", RequestNamespace="http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx", ResponseNamespace="http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ProcessAttributeEntity[] GetProcessAttribute(string Client, long UserID, long IdProcess) {
            object[] results = this.Invoke("GetProcessAttribute", new object[] {
                        Client,
                        UserID,
                        IdProcess});
            return ((ProcessAttributeEntity[])(results[0]));
        }
        
        /// <remarks/>
        public void GetProcessAttributeAsync(string Client, long UserID, long IdProcess) {
            this.GetProcessAttributeAsync(Client, UserID, IdProcess, null);
        }
        
        /// <remarks/>
        public void GetProcessAttributeAsync(string Client, long UserID, long IdProcess, object userState) {
            if ((this.GetProcessAttributeOperationCompleted == null)) {
                this.GetProcessAttributeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetProcessAttributeOperationCompleted);
            }
            this.InvokeAsync("GetProcessAttribute", new object[] {
                        Client,
                        UserID,
                        IdProcess}, this.GetProcessAttributeOperationCompleted, userState);
        }
        
        private void OnGetProcessAttributeOperationCompleted(object arg) {
            if ((this.GetProcessAttributeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetProcessAttributeCompleted(this, new GetProcessAttributeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx/GetProce" +
            "ssAttributeValue", RequestNamespace="http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx", ResponseNamespace="http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ProcessAttributeEntity[] GetProcessAttributeValue(string Client, long UserID, long IdProcessInstance) {
            object[] results = this.Invoke("GetProcessAttributeValue", new object[] {
                        Client,
                        UserID,
                        IdProcessInstance});
            return ((ProcessAttributeEntity[])(results[0]));
        }
        
        /// <remarks/>
        public void GetProcessAttributeValueAsync(string Client, long UserID, long IdProcessInstance) {
            this.GetProcessAttributeValueAsync(Client, UserID, IdProcessInstance, null);
        }
        
        /// <remarks/>
        public void GetProcessAttributeValueAsync(string Client, long UserID, long IdProcessInstance, object userState) {
            if ((this.GetProcessAttributeValueOperationCompleted == null)) {
                this.GetProcessAttributeValueOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetProcessAttributeValueOperationCompleted);
            }
            this.InvokeAsync("GetProcessAttributeValue", new object[] {
                        Client,
                        UserID,
                        IdProcessInstance}, this.GetProcessAttributeValueOperationCompleted, userState);
        }
        
        private void OnGetProcessAttributeValueOperationCompleted(object arg) {
            if ((this.GetProcessAttributeValueCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetProcessAttributeValueCompleted(this, new GetProcessAttributeValueCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx/GetProce" +
            "ssAttributeValueById", RequestNamespace="http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx", ResponseNamespace="http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ProcessAttributeEntity[] GetProcessAttributeValueById(string Client, long UserID, long lIdProcessInstance, long IdProcessAttribute) {
            object[] results = this.Invoke("GetProcessAttributeValueById", new object[] {
                        Client,
                        UserID,
                        lIdProcessInstance,
                        IdProcessAttribute});
            return ((ProcessAttributeEntity[])(results[0]));
        }
        
        /// <remarks/>
        public void GetProcessAttributeValueByIdAsync(string Client, long UserID, long lIdProcessInstance, long IdProcessAttribute) {
            this.GetProcessAttributeValueByIdAsync(Client, UserID, lIdProcessInstance, IdProcessAttribute, null);
        }
        
        /// <remarks/>
        public void GetProcessAttributeValueByIdAsync(string Client, long UserID, long lIdProcessInstance, long IdProcessAttribute, object userState) {
            if ((this.GetProcessAttributeValueByIdOperationCompleted == null)) {
                this.GetProcessAttributeValueByIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetProcessAttributeValueByIdOperationCompleted);
            }
            this.InvokeAsync("GetProcessAttributeValueById", new object[] {
                        Client,
                        UserID,
                        lIdProcessInstance,
                        IdProcessAttribute}, this.GetProcessAttributeValueByIdOperationCompleted, userState);
        }
        
        private void OnGetProcessAttributeValueByIdOperationCompleted(object arg) {
            if ((this.GetProcessAttributeValueByIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetProcessAttributeValueByIdCompleted(this, new GetProcessAttributeValueByIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx/UpdatePr" +
            "ocessAttributeValue", RequestNamespace="http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx", ResponseNamespace="http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UpdateProcessAttributeValue(string Client, long UserID, long IdProcessInstance, long IdProcessAttribute, string Value) {
            object[] results = this.Invoke("UpdateProcessAttributeValue", new object[] {
                        Client,
                        UserID,
                        IdProcessInstance,
                        IdProcessAttribute,
                        Value});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateProcessAttributeValueAsync(string Client, long UserID, long IdProcessInstance, long IdProcessAttribute, string Value) {
            this.UpdateProcessAttributeValueAsync(Client, UserID, IdProcessInstance, IdProcessAttribute, Value, null);
        }
        
        /// <remarks/>
        public void UpdateProcessAttributeValueAsync(string Client, long UserID, long IdProcessInstance, long IdProcessAttribute, string Value, object userState) {
            if ((this.UpdateProcessAttributeValueOperationCompleted == null)) {
                this.UpdateProcessAttributeValueOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateProcessAttributeValueOperationCompleted);
            }
            this.InvokeAsync("UpdateProcessAttributeValue", new object[] {
                        Client,
                        UserID,
                        IdProcessInstance,
                        IdProcessAttribute,
                        Value}, this.UpdateProcessAttributeValueOperationCompleted, userState);
        }
        
        private void OnUpdateProcessAttributeValueOperationCompleted(object arg) {
            if ((this.UpdateProcessAttributeValueCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateProcessAttributeValueCompleted(this, new UpdateProcessAttributeValueCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx/Test", RequestNamespace="http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx", ResponseNamespace="http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void Test() {
            this.Invoke("Test", new object[0]);
        }
        
        /// <remarks/>
        public void TestAsync() {
            this.TestAsync(null);
        }
        
        /// <remarks/>
        public void TestAsync(object userState) {
            if ((this.TestOperationCompleted == null)) {
                this.TestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTestOperationCompleted);
            }
            this.InvokeAsync("Test", new object[0], this.TestOperationCompleted, userState);
        }
        
        private void OnTestOperationCompleted(object arg) {
            if ((this.TestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TestCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <comentarios/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18058")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx")]
    public partial class ListItem {
        
        private bool enabledField;
        
        private bool selectedField;
        
        private string textField;
        
        private string valueField;
        
        public ListItem() {
            this.enabledField = true;
            this.selectedField = false;
            this.textField = "";
            this.valueField = "";
        }
        
        /// <comentarios/>
        [System.ComponentModel.DefaultValueAttribute(true)]
        public bool Enabled {
            get {
                return this.enabledField;
            }
            set {
                this.enabledField = value;
            }
        }
        
        /// <comentarios/>
        [System.ComponentModel.DefaultValueAttribute(false)]
        public bool Selected {
            get {
                return this.selectedField;
            }
            set {
                this.selectedField = value;
            }
        }
        
        /// <comentarios/>
        [System.ComponentModel.DefaultValueAttribute("")]
        public string Text {
            get {
                return this.textField;
            }
            set {
                this.textField = value;
            }
        }
        
        /// <comentarios/>
        [System.ComponentModel.DefaultValueAttribute("")]
        public string Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <comentarios/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18058")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx")]
    public partial class ProcessAttributeEntity {
        
        private int idField;
        
        private long idProcessField;
        
        private long idProcessInstanceField;
        
        private string nameField;
        
        private string valueField;
        
        /// <comentarios/>
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <comentarios/>
        public long IdProcess {
            get {
                return this.idProcessField;
            }
            set {
                this.idProcessField = value;
            }
        }
        
        /// <comentarios/>
        public long IdProcessInstance {
            get {
                return this.idProcessInstanceField;
            }
            set {
                this.idProcessInstanceField = value;
            }
        }
        
        /// <comentarios/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <comentarios/>
        public string Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void TestTransmissionCompletedEventHandler(object sender, TestTransmissionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TestTransmissionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TestTransmissionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetPackagesCompletedEventHandler(object sender, GetPackagesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPackagesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPackagesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetProcessesCompletedEventHandler(object sender, GetProcessesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetProcessesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetProcessesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetProcessByIdCompletedEventHandler(object sender, GetProcessByIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetProcessByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetProcessByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetActivityInstanceByUserIdCompletedEventHandler(object sender, GetActivityInstanceByUserIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetActivityInstanceByUserIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetActivityInstanceByUserIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetActivityInstancesByUserIdCompletedEventHandler(object sender, GetActivityInstancesByUserIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetActivityInstancesByUserIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetActivityInstancesByUserIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetProcessInstancesByIdCompletedEventHandler(object sender, GetProcessInstancesByIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetProcessInstancesByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetProcessInstancesByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void CreateProcessXMLCompletedEventHandler(object sender, CreateProcessXMLCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateProcessXMLCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateProcessXMLCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void WMCreateProcessInstanceCompletedEventHandler(object sender, WMCreateProcessInstanceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class WMCreateProcessInstanceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal WMCreateProcessInstanceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void WMStartProcessInstanceCompletedEventHandler(object sender, WMStartProcessInstanceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class WMStartProcessInstanceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal WMStartProcessInstanceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void EndActivityInstanceCompletedEventHandler(object sender, EndActivityInstanceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EndActivityInstanceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EndActivityInstanceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetConditionsByActivityInstanceCompletedEventHandler(object sender, GetConditionsByActivityInstanceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetConditionsByActivityInstanceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetConditionsByActivityInstanceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ListItem[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ListItem[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetConditionsTypeActivityInstanceCompletedEventHandler(object sender, GetConditionsTypeActivityInstanceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetConditionsTypeActivityInstanceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetConditionsTypeActivityInstanceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetConditionsCompletedEventHandler(object sender, GetConditionsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetConditionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetConditionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void AttachDataToActivityInstanceCompletedEventHandler(object sender, AttachDataToActivityInstanceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AttachDataToActivityInstanceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AttachDataToActivityInstanceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void AttachFileToActivityInstanceCompletedEventHandler(object sender, AttachFileToActivityInstanceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AttachFileToActivityInstanceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AttachFileToActivityInstanceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void AttachCommentToProcessInstanceCompletedEventHandler(object sender, AttachCommentToProcessInstanceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AttachCommentToProcessInstanceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AttachCommentToProcessInstanceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetProcessCasesByProcessCompletedEventHandler(object sender, GetProcessCasesByProcessCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetProcessCasesByProcessCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetProcessCasesByProcessCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetFormsByProcessCaseCompletedEventHandler(object sender, GetFormsByProcessCaseCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFormsByProcessCaseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFormsByProcessCaseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetProcessAttributeCompletedEventHandler(object sender, GetProcessAttributeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetProcessAttributeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetProcessAttributeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ProcessAttributeEntity[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ProcessAttributeEntity[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetProcessAttributeValueCompletedEventHandler(object sender, GetProcessAttributeValueCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetProcessAttributeValueCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetProcessAttributeValueCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ProcessAttributeEntity[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ProcessAttributeEntity[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetProcessAttributeValueByIdCompletedEventHandler(object sender, GetProcessAttributeValueByIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetProcessAttributeValueByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetProcessAttributeValueByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ProcessAttributeEntity[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ProcessAttributeEntity[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UpdateProcessAttributeValueCompletedEventHandler(object sender, UpdateProcessAttributeValueCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateProcessAttributeValueCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateProcessAttributeValueCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void TestCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}

#pragma warning restore 1591